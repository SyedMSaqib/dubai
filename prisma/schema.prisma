generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tours {
  id   String @id @default(uuid())
  name String

  image    TourImages? // A tour can have one image
  subTours SubTours[]
  slug     String      @unique // A tour can have many sub-tours
}

model TourImages {
  id        String   @id @default(uuid()) // Unique identifier
  src       String // URL of the image
  altText   String? // Optional alt text for accessibility
  tour      Tours    @relation(fields: [tourId], references: [id]) // Reference to the tour
  tourId    String   @unique // Foreign key to the Tours model
  createdAt DateTime @default(now()) // Timestamp for when the image was added
  updatedAt DateTime @updatedAt // Timestamp for the last update
}

model SubTours {
  id          String           @id @default(uuid())
  name        String
  thumbnail   String
  tour        Tours            @relation(fields: [tourSlug], references: [slug]) // Each sub-tour belongs to one tour
  tourSlug    String // Foreign key to Tours
  slug        String           @unique
  images      SubTourImages[] // A sub-tour can have many images
  SubTourInfo SubTourInfo?
  rating      SubToursRating[]
  Booking     Booking[]

  @@index([slug])
}

model SubTourImages {
  id        String   @id @default(uuid()) // Unique identifier
  src       String // URL of the image
  altText   String? // Optional alt text for accessibility
  subTour   SubTours @relation(fields: [subTourId], references: [id]) // Reference to the sub-tour
  subTourId String // Foreign key to the SubTours model
  createdAt DateTime @default(now()) // Timestamp for when the image was added
  updatedAt DateTime @updatedAt // Timestamp for the last update
}

model SubToursRating {
  id      String @id @default(uuid())
  rating  Float
  comment String

  subTourInfoId String?
  createdAt     DateTime  @default(now())
  SubTours      SubTours? @relation(fields: [subToursId], references: [id])
  subToursId    String?

  @@index([rating])
}

model SubTourInfo {
  id             String           @id @default(uuid())
  subTour        SubTours         @relation(fields: [subTourSlug], references: [slug])
  subTourSlug    String           @unique
  description    String
  duration       Int
  time           DateTime
  adultPrice     Int
  childPrice     Int
  privatePrice   Int
  Highlight      Highlight[]
  whatsIncluded  WhatsIncluded[]
  whatToExpect   WhatToExpect?
  additionalInfo AdditionalInfo[]
  addOns         AddOns[]

  @@index([time, duration, adultPrice, subTourSlug])
}

model Highlight {
  id            String       @id @default(uuid())
  highlight     String
  subTourInfo   SubTourInfo? @relation(fields: [subTourInfoId], references: [id])
  subTourInfoId String?

  @@index([subTourInfoId])
}

model WhatsIncluded {
  id            String      @id @default(uuid())
  included      String
  subTourInfo   SubTourInfo @relation(fields: [subTourInfoId], references: [id])
  subTourInfoId String

  @@index([subTourInfoId])
}

model WhatToExpect {
  id            String      @id @default(uuid())
  expectation   String
  subTourInfo   SubTourInfo @relation(fields: [subTourInfoId], references: [id])
  subTourInfoId String      @unique

  @@index([subTourInfoId])
}

model AdditionalInfo {
  id            String      @id @default(uuid())
  info          String
  subTourInfo   SubTourInfo @relation(fields: [subTourInfoId], references: [id])
  subTourInfoId String

  @@index([subTourInfoId])
}

model AddOns {
  id            String      @id @default(uuid())
  name          String
  price         Int
  subTourInfo   SubTourInfo @relation(fields: [subTourInfoId], references: [id])
  subTourInfoId String

  @@index([subTourInfoId])
}

model Booking {
  id                       String                     @id @default(uuid())
  adults                   Int
  child                    Int
  transportType            transportType
  totalPrice               Int
  BookingAddonWithQuantity BookingAddonWithQuantity[]
  user                     BookingUser                @relation(fields: [bookingUserId], references: [id])
  bookingUserId            String                     @unique
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  subTour                  SubTours                   @relation(fields: [subTourId], references: [id])
  subTourId                String
  tourDate                 DateTime                   @default(now())
}

model BookingUser {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  phone       String
  whatsApp    String?
  pickUpPoint String
  room        String?
  email       String
  booking     Booking?
}

model BookingAddonWithQuantity {
  id        String   @id @default(uuid())
  addonId   String
  quantity  Int
  Booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId String?
}

enum transportType {
  private
  shared
}
